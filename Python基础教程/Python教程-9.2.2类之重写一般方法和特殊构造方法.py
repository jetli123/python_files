
# -*- coding: utf-8 -*-
"""
每个类都可能有多个超类，它们从超类那里继承行为方式。如果一个方法在B 类的一个实例
中被调用（或一个属性被访问），但在B 类中没用找到该方法，那么就会去其它的超类Bird
里面找。
"""

# 在子类中增加功能的最基本的方式就是增加方法。但是也可以重写一些超类的方法来自定义继承的行为。
# B 类也能重写这个方法。


class A:  # A类是B类的超类或 父类

    def hello(self):
        print("Hello, I'm A.")


class B(A):  # B 类是子类，继承了A类
    def hello(self):  # B类重写 hello 方法
        print("Hello, I'm B.")

a = A()
a.hello()
# Hello, I'm A.

b = B()  # B 类重写 hello 方法，
b.hello()
# Hello, I'm B.

"""
重写是继承机制中的一个重要内容，对于构造方法尤其重要。构造方法用来初始化新创建对象的状态，
大多数子类不仅要拥有自己的初始化代码，还要拥有超类的初始化代码。
"""